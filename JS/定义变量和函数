1.JavaScript保留关键字
    在 JavaScript 中，一些标识符是保留关键字，不能用作变量名或函数名
    具体的保留关键字：https://www.runoob.com/js/js-reserved.html

2.JavaScript this 关键字
    面向对象语言中 this 表示当前对象的一个引用。
    但在 JavaScript 中 this 不是固定不变的，它会随着执行环境的改变而改变。
        在方法中，this 表示该方法所属的对象。
        如果单独使用，this 表示全局对象。
        在函数中，this 表示全局对象。
        在函数中，在严格模式下，this 是未定义的(undefined)。
        在事件中，this 表示接收事件的元素。
        类似 call() 和 apply() 方法可以将 this 引用到任何对象。

3.JavaScript let 和 const
    ES2015(ES6) 新增加了两个重要的 JavaScript 关键字: let 和 const。
    let 声明的变量只在 let 命令所在的代码块内有效。
    const 声明一个只读的常量，一旦声明，常量的值就不能改变。
    在 ES6 之前，JavaScript 只有两种作用域： 全局变量 与 函数内的局部变量。

4.JavaScript 块级作用域(Block Scope)
    使用 var 关键字声明的变量不具备块级作用域的特性，它在 {} 外依然能被访问到。
    在 ES6 之前，是没有块级作用域的概念的。
    ES6 可以使用 let 关键字来实现块级作用域。
    let 声明的变量只在 let 命令所在的代码块 {} 内有效，在 {} 之外不能访问。

5.重新定义变量
    使用 var 关键字重新声明变量可能会带来问题。
    在块中重新声明变量也会重新声明块外的变量：
        var x = 10;
        // 这里输出 x 为 10
        { 
            var x = 2;
            // 这里输出 x 为 2
        }
        // 这里输出 x 为 2
    let 关键字就可以解决这个问题，因为它只在 let 命令所在的代码块 {} 内有效。
        var x = 10;
        // 这里输出 x 为 10
        { 
            let x = 2;
            // 这里输出 x 为 2
        }
        // 这里输出 x 为 10

6.HTML 代码中使用全局变量
    在 JavaScript 中, 全局作用域是针对 JavaScript 环境。
    在 HTML 中, 全局作用域是针对 window 对象。
    使用 var 关键字声明的全局作用域变量属于 window 对象:
        var carName = "Volvo";
        // 可以使用 window.carName 访问变量
    使用 let 关键字声明的全局作用域变量不属于 window 对象:
        let carName = "Volvo";
        // 不能使用 window.carName 访问变量

7.重置变量
    1)使用 var 关键字声明的变量在任何地方都可以修改：
    2)在相同的作用域或块级作用域中，不能使用 let 关键字来重置 var 关键字声明的变量:
        var x = 2;       // 合法
        let x = 3;       // 不合法

        {
            var x = 4;   // 合法
            let x = 5   // 不合法
        }
    3)在相同的作用域或块级作用域中，不能使用 let 关键字来重置 let 关键字声明的变量
    4)在相同的作用域或块级作用域中，不能使用 var 关键字来重置 let 关键字声明的变量:
    5)let 关键字在不同作用域，或不同块级作用域中是可以重新声明赋值的:
    6)变量提升
        var 关键字定义的变量可以在使用后声明，也就是变量可以先使用再声明
        let 关键字定义的变量则不可以在使用后声明，也就是变量需要先声明再使用。

8.const 变量
    1)const 用于声明一个或多个常量，声明时必须进行初始化，且初始化后值不可再修改：
    2)const定义常量与使用let 
        定义的变量相似：
            二者都是块级作用域
            都不能和它所在作用域内的其他变量或函数拥有相同的名称
        两者还有以下两点区别：
            const声明的常量必须初始化，而let声明的变量不用
            const 定义常量的值不能通过再赋值修改，也不能再次声明。而 let 定义的变量值可以修改
    3)并非真正的常量
        const 的本质: const 定义的变量并非常量，并非不可变，它定义了一个常量引用一个值。使用 const 定义的对象或者数组，其实是可变的。下面的代码并不会报错：
            // 创建常量对象
            const car = {type:"Fiat", model:"500", color:"white"};
            
            // 修改属性:
            car.color = "red";
            
            // 添加属性
            car.owner = "Johnson";
    4)重置变量
        使用 var 关键字声明的变量在任何地方都可以修改：
        在相同的作用域或块级作用域中，不能使用 const 关键字来重置 var 和 let关键字声明的变量:
        在相同的作用域或块级作用域中，不能使用 const 关键字来重置 const 关键字声明的变量:
        const 关键字在不同作用域，或不同块级作用域中是可以重新声明赋值的:

9.JSON 
    JSON.parse()	用于将一个 JSON 字符串转换为 JavaScript 对象。
    JSON.stringify()	用于将 JavaScript 值转换为 JSON 字符串。

10.javascript:void(0) 含义
    我们经常会使用到 javascript:void(0) 这样的代码，那么在 JavaScript 中 javascript:void(0) 代表的是什么意思呢？
    javascript:void(0) 中最关键的是 void 关键字， void 是 JavaScript 中非常重要的关键字，该操作符指定要计算一个表达式但是不返回值。

11.href="#"与href="javascript:void(0)"的区别
    # 包含了一个位置信息，默认的锚是#top 也就是网页的上端。
    而javascript:void(0), 仅仅表示一个死链接。
    在页面很长的时候会使用 # 来定位页面的具体位置，格式为：# + id。
    如果你要定义一个死链接请使用 javascript:void(0) 。
