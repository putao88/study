1.变量提升：
    函数声明和变量声明总是会被解释器悄悄地被"提升"到方法体的最顶部。
    JavaScript 只有声明的变量会提升，初始化的不会。

2.严格模式
    JavaScript 严格模式(use strict)
    "use strict" 的目的是指定代码在严格条件下执行。
    严格模式下你不能使用未声明的变量。

3.为什么使用严格模式
    消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为;
    消除代码运行的一些不安全之处，保证代码运行的安全；
    提高编译器效率，增加运行速度；
    为未来新版本的Javascript做好铺垫。

4.JavaScript使用误区
    1)在常规的比较中，数据类型是被忽略的，以下 if 条件语句返回 true：
        这种错误经常会在 switch 语句中出现，switch 语句会使用恒等计算符(===)进行比较:
        以下实例会执行 alert 弹窗：

        var x = 10;
        switch(x) {
            case 10: alert("Hello");
        }
    2)浮点型数据使用注意事项
        JavaScript 中的所有数据都是以 64 位浮点型数据(float) 来存储。

        所有的编程语言，包括 JavaScript，对浮点型数据的精确度都很难确定：

        var x = 0.1;
        var y = 0.2;
        var z = x + y            // z 的结果为 0.30000000000000004
        if (z == 0.3)            // 返回 false
        为解决以上问题，可以用整数的乘除法来解决：
            var z = (x * 10 + y * 10) / 10;       // z 的结果为 0.3
    3)JavaScript 允许我们在字符串中使用断行语句:
        var x =
        "Hello World!";
        但是，在字符串中直接使用回车换行是会报错的：
            var x = "Hello
            World!";
        字符串断行需要使用反斜杠(\)，如下所示:
            var x = "Hello \
            World!";
    4)定义数组元素，最后不能添加逗号
        var colors = [5, 6, 7,]; //这样数组的长度可能为3 也可能为4。
    5)定义对象，最后不能添加逗号
        websites = {site:"菜鸟教程", url:"www.runoob.com", like:460,}
    6)Undefined 不是 Null
        在 JavaScript 中, null 用于对象, undefined 用于变量，属性和方法。
        对象只有被定义才有可能为 null，否则为 undefined。
        如果我们想测试对象是否存在，在对象还没定义时将会抛出一个错误。
        错误的使用方式：
            if (myObj !== null && typeof myObj !== "undefined") 
            正确的方式是我们需要先使用 typeof 来检测对象是否已定义：
            if (typeof myObj !== "undefined" && myObj !== null)

    7)程序块作用域
        在每个代码块中 JavaScript 不会创建一个新的作用域，一般各个代码块的作用域都是全局的。
        以下代码的的变量 i 返回 10，而不是 undefined：